<?php

namespace Tests\Integration;

use App\Models\User\AccessGroup;
use App\Models\User\Key;
use App\Models\User\PasswordReset;
use App\Models\User\ProjectMember;
use App\Models\User\ProjectOauthProvider;
use App\Models\User\User;

use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Arr;

class UserRoutesTest extends ApiV4Test
{
    use WithFaker;

    /**
     * @category V4_API
     * @category Route Name: v4_access_groups.index
     * @category Route Path: https://api.dbp.test/access/groups?v=4&key={key}
     * @see      \App\Http\Controllers\User\AccessGroupController::index
     * @group    V4
     * @group    travis
     * @test
     */
    public function accessGroups()
    {
        $path = route('v4_access_groups.index', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $group = AccessGroup::inRandomOrder()->first();
        $path              = route('v4_access_groups.show', Arr::add($this->params, 'id', $group->name));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_resources
     * @category Route Path: https://api.dbp.test/resources?v=4&key={key}
     * @see      \App\Http\Controllers\Organization\ResourcesController
     * @group    V4
     * @group    travis
     * @test
     */
    public function resources()
    {
        $path = route('v4_resources.index', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $path = route('v4_resources.show', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        /*
        $path = route('v4_resources.update', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $path = route('v4_resources.store', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $path = route('v4_resources.destroy', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
        */
    }

    /**
     * @category V4_API
     * @category Route Name: v4_user.store
     * @category Route Path: https://api.dbp.test/users?v=4&key={key}
     * @see      \App\Http\Controllers\User\UsersController
     * @group    V4
     * @group    travis
     * @test
     */
    public function createUser()
    {
        global $new_user_data;
        $new_user = factory(User::class)->make([
            'notes' => 'A user generated by Feature Tests',
            'password' => bcrypt('test_1234'),
            'project_id' => 14321 // DEV Digital Bible Platform
        ]);

        // override hidden field
        $password = $new_user->password;
        $new_user_copy = json_decode(json_encode($new_user), true);
        $new_user_copy['password'] = $password;

        $path = route('v4_user.store', $this->params);
        echo "\nTesting: POST $path";
        $response = $this->withHeaders($this->params)->post($path, $new_user_copy);
        $response->assertSuccessful();
        $result = json_decode($response->getContent(), true);
        $new_user_data = $result['data'];
        // pass the projectid around
        $new_user_data['project_id'] = $new_user_copy['project_id'];
        $this->assertSame($result['meta']['success'], 'User created');
    }

    /**
     * @category V4_API
     * @category Route Name: v4_user.show
     * @category Route Path: https://api.dbp.test/users?v=4&key={key}
     * @see      \App\Http\Controllers\User\UsersController
     * @group    V4
     * @group    travis
     * @test
     */
    public function viewUser()
    {
        global $new_user_data;
        $path = route('v4_user.show', array_merge([
          'user_id' => $new_user_data['id'],
          'project_id' => $new_user_data['project_id']
        ], $this->params));
        echo "\nTesting: GET $path";
        $response = $this->withHeaders(array_merge([
          'user_id' => $new_user_data['id'],
          'project_id' => $new_user_data['project_id']
        ], $this->params))->get($path);
        echo $response->getContent();
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_user.update
     * @category Route Path: https://api.dbp.test/users?v=4&key={key}
     * @see      \App\Http\Controllers\User\UsersController
     * @group    V4
     * @group    travis
     * @test
     */
    public function updateUser()
    {
        global $new_user_data;
        $this->markTestIncomplete("unauthorizedToAlterUsers fails? no a developer project member?");
        $path = route('v4_user.update', array_merge([
          'user_id' => $new_user_data['id'],
          'project_id' => $new_user_data['project_id']
        ], $this->params));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->put($path, ['notes' => 'A user updated by Feature tests', 'email' => 'new_email@gmail.com']);
        echo $response->getContent();
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_user.destroy
     * @category Route Path: https://api.dbp.test/users?v=4&key={key}
     * @see      \App\Http\Controllers\User\UsersController
     * @group    V4
     * @group    travis
     * @test
     */
    public function destroyUser()
    {
        global $new_user_data;
        $this->markTestIncomplete("Maybe this token doesn't have access to the user created");
        // insert into user_api_tokens (user_id, api_token) values (1, '456542f8a59eac51e895c5ff9f388dc93fa0f0f88fc43e3e3ec16bacf20dafd0');
        $params_token = array_merge([
          'api_token'=>'IRSooPKAWU5dUeEVw6W2rQy3o6ursYtbjMGSeLjljcDSUjopSbEXXIBweli7',
          'user_id' => $new_user_data['id'],
          'project_id' => $new_user_data['project_id']
        ], $this->params);

        $path = route('v4_user.destroy', $params_token);
        echo "\nTesting: DELETE $path";
        $response = $this->withHeaders($this->params)->delete($path);
        echo $response->getContent();
        $response->assertSuccessful();
    }


    /**
     * @category V4_API
     * @category Route Name: v4_user
     * @category Route Path: https://api.dbp.test/users?v=4&key={key}
     * @see      \App\Http\Controllers\User\UsersController
     * @group    V4
     * @group    travis
     * @test
     */
    public function users()
    {
        $this->markTestIncomplete("Permissions mess");
        $key = Key::with('user.projectMembers')->where('key', $this->key)->first();
        // the default test-key doesn't seem to have any project members
        // 2=Admin,4=no record...3=developer
        // hrm the only 2,4 is project_id 52341 in seed data
        // and I guess our key
        // insert into project_members (project_id, role_id) values (14321, 2)
        // seems user_keys would need a user_id: 3021, name: test-key, key: (matches test-key)
        // these seemed to correct it
        // delete from user_keys where name = 'test-key';
        // insert into user_keys (user_id, name, `key`) values (3021, 'test-key', 'L1ofChl8Kx1jWExu');
        //
        // for delete, reassign token to the correct user
        // delete from user_api_tokens where api_token = '456542f8a59eac51e895c5ff9f388dc93fa0f0f88fc43e3e3ec16bacf20dafd0';
        // insert into user_api_tokens (user_id, api_token) values (3021, '456542f8a59eac51e895c5ff9f388dc93fa0f0f88fc43e3e3ec16bacf20dafd0');
        $project = $key->user->projectMembers->whereIn('role_id', [2,4])->first();
        $project_id = 14321; // DEV Digital Bible Platform
        if ($project) {
          $project_id = $project->project_id;
        }

        $path = route('v4_user.index', Arr::add($this->params, 'project_id', $project_id));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $new_user = factory(User::class)->make([
            'notes' => 'A user generated by Feature Tests',
            'password' => bcrypt('test_1234'),
            'project_id' => $project_id
        ]);

        // override hidden field
        $password = $new_user->password;
        $new_user_copy = json_decode(json_encode($new_user), true);
        $new_user_copy['password'] = $password;

        $path = route('v4_user.store', $this->params);
        echo "\nTesting: POST $path";
        $response = $this->withHeaders($this->params)->post($path, $new_user_copy);
        $response->assertSuccessful();

        // Ensure the new user matches the input
        $new_created_user = json_decode($response->getContent());
        $new_created_user = $new_created_user->data;

        $this->assertSame($new_user['email'], $new_created_user->email);
        $this->assertSame($new_user['name'], $new_created_user->name);

        // will get a 422 here if delete doesn't work
        // if new_email@gmail.com get stucked in used...
        // select id from users where email = 'new_email@gmail.com';
        // delete from user_api_tokens where user_id = x;
        // delete from users where id = x;

        $path = route('v4_user.update', array_merge(['user_id' => $new_created_user->id,'project_id' => $project_id], $this->params));
        echo "\nTesting: PUT $path";
        $response = $this->withHeaders($this->params)->put($path, ['notes' => 'A user updated by Feature tests', 'email' => 'new_email@gmail.com']);
        echo $response->getContent(); // check for message.email problem
        $response->assertSuccessful();

        $path = route('v4_user.show', array_merge(['user_id' => $new_created_user->id,'project_id' => $project_id], $this->params));
        echo "\nTesting: GET $path";
        $response = $this->withHeaders(array_merge(['user_id' => $new_created_user->id,'project_id' => $project_id], $this->params))->get($path);
        $response->assertSuccessful();

        // we need a token to nuke the user...
        // insert into user_api_tokens (user_id, api_token) values (3021, '456542f8a59eac51e895c5ff9f388dc93fa0f0f88fc43e3e3ec16bacf20dafd0');
        // still not enough to fix 401...
        $params_token = array_merge([
          'api_token'=>'IRSooPKAWU5dUeEVw6W2rQy3o6ursYtbjMGSeLjljcDSUjopSbEXXIBweli7',
          'user_id' => $new_created_user->id,
          'project_id' => $project_id,
          // this is expecting Alan's password...
          'password' => $password // to branch into password validation to get around 401
        ], $this->params);

        $path = route('v4_user.destroy', $params_token);
        echo "\nTesting: DELETE $path";
        $response = $this->withHeaders($this->params)->delete($path);
        echo $response->getContent(); // check for problems
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_user.login
     * @category Route Path: https://api.dbp.test/users/login?v=4&key={key}
     * @see      \App\Http\Controllers\User\UsersController::login
     * @group    V4
     * @group    travis
     * @test
     */
    public function userLogin()
    {
        $user = factory(User::class)->create(['password' => bcrypt('test_password')]);
        $login = ['email' => $user->email, 'password' => 'test_password'];

        $path = route('v4_user.login', $this->params);
        echo "\nTesting Login Via Password: $path";

        $response = $this->withHeaders($this->params)->post($path, $login);
        $response->assertSuccessful();
        $user->delete();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_user.oAuth
     * @category Route Path: https://api.dbp.test/users/login/{driver}?v=4&key={key}
     * @see      \App\Http\Controllers\User\SocialController::getSocialRedirect
     * @group    V4
     * @group    travis
     * @test
     */
    public function userOAuth()
    {
        $projectOAuth = ProjectOauthProvider::whereIn('name', ['google','github','facebook'])->inRandomOrder()->first();
        $path = route('v4_user.oAuth', array_merge($this->params, ['driver' => $projectOAuth->name, 'project_id' => $projectOAuth->project_id]));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_user.password_reset
     * @category Route Path: https://api.dbp.test/users/password/reset?v=4&key={key}
     * @see      \App\Http\Controllers\User\PasswordsController::validatePasswordReset
     * @group    V4
     * @group    travis
     * @test
     */
    public function userPasswordReset()
    {
        $this->markTestIncomplete("Base table or view not found: 1146 Table 'dbp.password_resets' doesn't exist");
        $project_member = ProjectMember::with('user')->where('role_id', 1)->inRandomOrder()->first();
        $password_reset = PasswordReset::create([
            'email' => $project_member->user->email,
            'token' => unique_random('password_resets', 'token')
        ]);

        $account = [
            'new_password'              => 'test_password123',
            'new_password_confirmation' => 'test_password123',
            'token_id'                  => '12345',
            'email'                     => $project_member->user->email,
            'project_id'                => $project_member->project_id,
            'token_id'                  => $password_reset->token
        ];
        $path = route('v4_user.password_reset', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->post($path, $account);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_user.password_email
     * @category Route Path: https://api.dbp.test/users/password/email?v=4&key={key}
     * @see      \App\Http\Controllers\User\PasswordsController::triggerPasswordResetEmail
     * @group    V4
     * @group    non-travis | Need Mailtrap.io setup
     * @test
     */
    public function userPasswordEmail()
    {
        $project_member = ProjectMember::with('user')->where('role_id', 1)->inRandomOrder()->first();

        $path = route('v4_user.password_email', array_merge([
            'email'      => $project_member->user->email,
            'project_id' => $project_member->project_id
        ], $this->params));
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->post($path);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_notes
     * @category Route Path: https://api.dbp.test/users/5/notes?v=4&key={key}
     * @see      \App\Http\Controllers\User\NotesController
     * @group    V4
     * @group    travis
     * @test
     */
    public function notes()
    {
        $this->markTestIncomplete("Getting 500s, seems FK related");
        $key = Key::where('key', $this->key)->first();
        $path = route('v4_notes.index', Arr::add($this->params, 'user_id', $key->user_id));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $test_note = [
            'user_id' => $key->user_id,
            'bible_id' => 'ENGESV',
            'book_id' => 'GEN',
            'chapter' => 1,
            'verse_start' => 1,
            'verse_end' => 2,
            'notes' => 'A generated test note',
        ];
        $path = route('v4_notes.store', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->post($path, $test_note);
        $response->assertSuccessful();

        $test_created_note = json_decode($response->getContent())->data;

        $path = route('v4_notes.show', array_merge(['user_id' => $key->user_id,'note_id' => $test_created_note->id], $this->params));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $path = route('v4_notes.update', array_merge(['user_id' => $key->user_id,'note_id' => $test_created_note->id], $this->params));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->put($path, ['description' => 'A generated test note that has been updated']);
        $response->assertSuccessful();

        $path = route('v4_notes.destroy', array_merge(['user_id' => $key->user_id,'note_id' => $test_created_note->id], $this->params));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->delete($path);
        $response->assertSuccessful();
    }


    /**
     * @category V4_API
     * @category Route Name: v4_bookmarks.index
     * @category Route Path: https://api.dbp.test/users/{user_id}/bookmarks?v=4&key={key}
     * @see      \App\Http\Controllers\User\BookmarksController::index
     * @group    V4
     * @group    travis
     * @test
     */
    public function bookmarks()
    {
        $this->markTestIncomplete("Getting 500s");
        $key = Key::where('key', $this->key)->first();

        $path = route('v4_bookmarks.index', Arr::add($this->params, 'user_id', $key->user_id));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $test_bookmark = [
            'bible_id'      => 'ENGESV',
            'user_id'       => $key->user_id,
            'book_id'       => 'GEN',
            'chapter'       => 1,
            'verse_start'   => 10,
        ];
        $path = route('v4_bookmarks.store', Arr::add($this->params, 'user_id', $key->user_id));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->post($path, $test_bookmark);
        $response->assertSuccessful();

        $test_bookmark = json_decode($response->getContent())->data;

        $path = route('v4_bookmarks.update', array_merge(['user_id' => $key->user_id,'bookmark_id' =>$test_bookmark->id], $this->params));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->put($path, ['book_id' => 'EXO']);
        $response->assertSuccessful();

        $path = route('v4_bookmarks.destroy', array_merge(['user_id' => $key->user_id,'bookmark_id' =>$test_bookmark->id], $this->params));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->delete($path);
        $response->assertSuccessful();
    }
}
