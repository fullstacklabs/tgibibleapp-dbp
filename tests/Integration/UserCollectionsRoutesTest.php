<?php

namespace Tests\Integration;

use App\Traits\AccessControlAPI;
use App\Models\User\Key;
use App\Models\Collection\Collection;
use App\Models\Collection\CollectionPlaylist;

use Illuminate\Support\Arr;

class UserCollectionsRoutesTest extends ApiV4Test
{
    use AccessControlAPI;

    private function getToken()
    {
        // convert key into api_token
        //$path = route('v4_user.login', array_merge(['email'=>'X', 'password'=>'Y'], $this->params));

        // insert into user_api_tokens (user_id, api_token) values (1, '456542f8a59eac51e895c5ff9f388dc93fa0f0f88fc43e3e3ec16bacf20dafd0');
        return ['api_token'=>'IRSooPKAWU5dUeEVw6W2rQy3o6ursYtbjMGSeLjljcDSUjopSbEXXIBweli7'];
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.store
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsCreate()
    {
        global $new_created_collection;
        $key = Key::where('key', $this->key)->first();
        $params_token = array_merge($this->getToken(), $this->params);

        // test store
        $new_collection = factory(Collection::class)->make([
          'name' => 'A collection generated by Feature Tests',
          'language_id' => 1,
          'order_column' => 1,
          'user_id' => $key->user_id
        ]);
        $path = route('v4_collections.store', $params_token);
        echo "\nTesting: POST $path";
        $response = $this->withHeaders($this->params)->post($path, $new_collection->toArray());
        $response->assertSuccessful();

        // Ensure the new user matches the input
        $new_created_collection = json_decode($response->getContent());

        $this->assertSame($new_collection['name'], $new_created_collection->name);
        $this->assertSame($new_collection['language_id'], $new_created_collection->language_id);
        $this->assertSame($new_collection['order_column'], $new_created_collection->order_column);
        //$this->assertSame($new_collection['user_id'], $new_created_collection->user_id);
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.update
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsUpdate()
    {
        global $new_created_collection;
        $key = Key::where('key', $this->key)->first();
        $params_token = array_merge($this->getToken(), $this->params);

        // test update
        $path = route('v4_collections.update', array_merge(['collection_id' => $new_created_collection->id], $params_token));
        echo "\nTesting: PUT $path";
        $response = $this->withHeaders($this->params)->put($path, ['name' => 'A collection updated by Feature tests']);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.index
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController::index
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsIndex()
    {
        $path = route('v4_collections.index', $this->params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $result = collect(json_decode($response->getContent()));
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.show
     * @category Route Path: https://api.dbp.test/collections/1?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController::show
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsShow()
    {
        // 1255627 could be any user...
        // insert into collections (name, user_id, language_id, order_column) values ('my collection', 1255627, 1, 1);
        $params = array_merge(['id' => 1], $this->params);
        $path = route('v4_collections.show', $params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collection_playlists.store
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionPlaylistsCreate()
    {
        global $new_created_collection, $new_created_collection_playlist;
        $key = Key::where('key', $this->key)->first();
        $params_token = array_merge($this->getToken(), $this->params);

        // test store
        $new_collection_playlist = factory(CollectionPlaylist::class)->make([
          'collection_id' => $new_created_collection->id,
          'playlist_id'   => 4,
          'order_column'  => 1,
        ]);
        $path = route('v4_collection_playlists.store', array_merge([
          'collection_id'=>$new_created_collection->id,
        ], $params_token));
        echo "\nTesting: POST $path";
        $response = $this->withHeaders($this->params)->post($path, $new_collection_playlist->toArray());
        $response->assertSuccessful();

        // Ensure the new user matches the input
        $new_created_collection_playlist = json_decode($response->getContent());

        $this->assertEquals($new_collection_playlist['collection_id'], $new_created_collection_playlist->collection_id);
        $this->assertEquals($new_collection_playlist['playlist_id'],   $new_created_collection_playlist->playlist_id);
        $this->assertEquals($new_collection_playlist['order_column'],  $new_created_collection_playlist->order_column);
        //$this->assertEquals($new_collection['user_id'], $new_created_collection->user_id);
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.playlists
     * @category Route Path: https://api.dbp.test/collections/1?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController::getPlaylists
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsPlaylists()
    {
        global $new_created_collection, $new_created_collection_playlist;
        $params = array_merge([
          'id' => $new_created_collection->id,
        ], $this->params);
        $path = route('v4_collections.playlists', $params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $collection_playlist_result = json_decode($response->getContent());
        $this->assertEquals(count($collection_playlist_result->playlists), 1);
        $this->assertEquals($new_created_collection_playlist->collection_id, $collection_playlist_result->playlists[0]->collection_id);
        $this->assertEquals($new_created_collection_playlist->playlist_id,   $collection_playlist_result->playlists[0]->playlist_id);
        $this->assertEquals($new_created_collection_playlist->order_column,  $collection_playlist_result->playlists[0]->order_column);
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collection_playlists.update
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionPlaylistsUpdate()
    {
        global $new_created_collection, $new_created_collection_playlist;
        $key = Key::where('key', $this->key)->first();
        $params_token = array_merge($this->getToken(), $this->params);

        // test delete
        $path = route('v4_collection_playlists.update', array_merge([
          'collection_id' => $new_created_collection->id,
          'playlist_id' => $new_created_collection_playlist->playlist_id,
          'order_column' => 2
        ], $params_token));
        echo "\nTesting: POST $path";
        $response = $this->withHeaders($this->params)->post($path);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.playlists
     * @category Route Path: https://api.dbp.test/collections/1?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController::getPlaylists
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsPlaylistsUpdateCheck()
    {
        global $new_created_collection, $new_created_collection_playlist;
        $params = array_merge([
          'id' => $new_created_collection->id,
//          'show_details' => true,
        ], $this->params);
        $path = route('v4_collections.playlists', $params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $collection_playlist_result = json_decode($response->getContent());
        $this->assertEquals(count($collection_playlist_result->playlists), 1);
        $this->assertEquals($new_created_collection_playlist->collection_id, $collection_playlist_result->playlists[0]->collection_id);
        $this->assertEquals($new_created_collection_playlist->playlist_id,   $collection_playlist_result->playlists[0]->playlist_id);
        $this->assertEquals(2,  $collection_playlist_result->playlists[0]->order_column);
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collection_playlists.destroy
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionPlaylistsDestroy()
    {
        global $new_created_collection, $new_created_collection_playlist;
        $key = Key::where('key', $this->key)->first();
        $params_token = array_merge($this->getToken(), $this->params);

        // test delete
        $path = route('v4_collection_playlists.destroy', array_merge([
          'collection_id' => $new_created_collection->id,
          'playlist_id' => $new_created_collection_playlist->playlist_id
        ], $params_token));
        echo "\nTesting: DELETE $path";
        $response = $this->withHeaders($this->params)->delete($path);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.playlists
     * @category Route Path: https://api.dbp.test/collections/1?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController::getPlaylists
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsEmptyPlaylists()
    {
        global $new_created_collection, $new_created_collection_playlist;
        $params = array_merge([
          'id' => $new_created_collection->id,
          'show_details' => true,
        ], $this->params);
        $path = route('v4_collections.playlists', $params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();

        $collection_playlist_result = json_decode($response->getContent());
        $this->assertEquals(count($collection_playlist_result->playlists), 0);
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.destroy
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsDestroy()
    {
        global $new_created_collection;
        $key = Key::where('key', $this->key)->first();
        $params_token = array_merge($this->getToken(), $this->params);

        // test delete
        $path = route('v4_collections.destroy', array_merge(['collection_id' => $new_created_collection->id], $params_token));
        echo "\nTesting: DELETE $path";
        $response = $this->withHeaders($this->params)->delete($path);
        $response->assertSuccessful();
    }
}
