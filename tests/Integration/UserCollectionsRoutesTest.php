<?php

namespace Tests\Integration;

use App\Traits\AccessControlAPI;

use App\Models\Collection\Collection;

use Illuminate\Support\Arr;

class UserCollectionsRoutesTest extends ApiV4Test
{
    use AccessControlAPI;

    /**
     * @category V4_API
     * @category Route Name: v4_plans
     * @category Route Path: https://api.dbp.test/plans?v=4&key={key}
     * @see      \App\Http\Controllers\User\PlansController
     * @group    PlanRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collections()
    {
        // test index
        /*
        $path = route('v4_plans.index', Arr::add($this->params, 'name', 'unit-test'));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
        */

        // no user with this key... so this fails
        $this->markTestIncomplete('this key has no user, so this fails');

        // test store
        $new_plan = factory(Plan::class)->make([
          'name' => 'A plan generated by Feature Tests',
            //'notes' => 'A user generated by Feature Tests',
            //'password' => bcrypt('test_1234'),
            //'project_id' => $project_id
        ]);
        $path = route('v4_collections.store', $this->params);
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->post($path, $new_plan->toArray());
        $response->assertSuccessful();

        // Ensure the new user matches the input
        $new_created_plan = json_decode($response->getContent());
        $new_created_plan = $new_created_plan->data;

        $this->assertSame($new_plan['email'], $new_created_plan->email);
        $this->assertSame($new_plan['name'], $new_created_plan->name);

        // test update
        $path = route('v4_collections.update', array_merge(['plan_id' => $new_created_plan->id], $this->params));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->put($path, ['name' => 'A plan updated by Feature tests']);
        $response->assertSuccessful();

        // test delete
        $path = route('v4_collections.destroy', array_merge(['user_id' => $new_created_user->id,'project_id' => $project_id], $this->params));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->delete($path);
        $response->assertSuccessful();

    }


    /**
     * @category V4_API
     * @category Route Name: v4_plans.index
     * @category Route Path: https://api.dbp.test/plans?v=4&key={key}
     * @see      \App\Http\Controllers\Plan\PlansController::index
     * @group    PlanRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsIndex()
    {
        $path = route('v4_collections.index', $this->params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $result = collect(json_decode($response->getContent()));
        print_r($result);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_plans.show
     * @category Route Path: https://api.dbp.test/plans/X?v=4&key={key}
     * @see      \App\Http\Controllers\Plan\PlansController::show
     * @group    PlanRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsShow()
    {
        $params = array_merge(['id' => 181], $this->params);
        $path = route('v4_collections.show', $params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_plans.translate
     * @category Route Path: https://api.dbp.test/plans/X/translate?v=4&key={key}
     * @see      \App\Http\Controllers\Plan\PlansController::translate
     * @group    PlanRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsTranslate()
    {
        // no user with this key... so this fails
        $this->markTestIncomplete('this key has no user, so this fails');
        $params = array_merge(['id' => 181], $this->params);
        $path = route('v4_collections.translate', $params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
    }


}
