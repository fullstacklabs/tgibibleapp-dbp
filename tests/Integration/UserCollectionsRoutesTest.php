<?php

namespace Tests\Integration;

use App\Traits\AccessControlAPI;
use App\Models\User\Key;
use App\Models\Collection\Collection;

use Illuminate\Support\Arr;

class UserCollectionsRoutesTest extends ApiV4Test
{
    use AccessControlAPI;

    /**
     * @category V4_API
     * @category Route Name: v4_collections
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collections()
    {
        // test index
        /*
        $path = route('v4_collections.index', Arr::add($this->params, 'name', 'unit-test'));
        echo "\nTesting: $path";
        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
        */

        // no user with this key... so this fails
        //$this->markTestIncomplete('this key has no user, so this fails');

        $key = Key::where('key', $this->key)->first();

        // test store
        $new_collection = factory(Collection::class)->make([
          'name' => 'A collection generated by Feature Tests',
          'user_id' => $key->user_id
            //'notes' => 'A user generated by Feature Tests',
            //'password' => bcrypt('test_1234'),
            //'project_id' => $project_id
        ]);
        $path = route('v4_collections.store', array_merge(['api_token'=>'L1ofChl8Kx1jWExu'], $this->params));
        echo "\nTesting: POST $path";
        $response = $this->withHeaders($this->params)->post($path, $new_collection->toArray());
        echo $response->getContent();
        $response->assertSuccessful();
        echo "store works!\n";

        // Ensure the new user matches the input
        $new_created_collection = json_decode($response->getContent());
        $new_created_collection = $new_created_collection->data;

        $this->assertSame($new_collection['email'], $new_created_collection->email);
        $this->assertSame($new_collection['name'], $new_created_collection->name);

        // test update
        $path = route('v4_collections.update', array_merge(['collection_id' => $new_created_collection->id], $this->params));
        echo "\nTesting: PUT $path";
        $response = $this->withHeaders($this->params)->put($path, ['name' => 'A collection updated by Feature tests']);
        $response->assertSuccessful();
        echo "update works!\n";

        // test delete
        $path = route('v4_collections.destroy', array_merge(['user_id' => $new_created_user->id,'project_id' => $project_id], $this->params));
        echo "\nTesting: DELETE $path";
        $response = $this->withHeaders($this->params)->delete($path);
        $response->assertSuccessful();
        echo "destroy works!\n";

    }


    /**
     * @category V4_API
     * @category Route Name: v4_collections.index
     * @category Route Path: https://api.dbp.test/collections?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController::index
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsIndex()
    {
        $path = route('v4_collections.index', $this->params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $result = collect(json_decode($response->getContent()));
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.show
     * @category Route Path: https://api.dbp.test/collections/1?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController::show
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    public function collectionsShow()
    {
        // 1255627 could be any user...
        // insert into collections (name, user_id, language_id, order_column) values ('my collection', 1255627, 1, 1);
        $params = array_merge(['id' => 1], $this->params);
        $path = route('v4_collections.show', $params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
    }

    /**
     * @category V4_API
     * @category Route Name: v4_collections.translate
     * @category Route Path: https://api.dbp.test/collections/X/translate?v=4&key={key}
     * @see      \App\Http\Controllers\Collection\CollectionsController::translate
     * @group    CollectionRoutes
     * @group    V4
     * @group    travis
     * @test
     */
    /*
    public function collectionsTranslate()
    {
        // no user with this key... so this fails
        //$this->markTestIncomplete('this key has no user, so this fails');
        $params = array_merge(['id' => 1], $this->params);
        $path = route('v4_collections.translate', $params);
        echo "\nTesting: $path";

        $response = $this->withHeaders($this->params)->get($path);
        $response->assertSuccessful();
    }
    */

}
